// This is your Prisma schema file for mind.law
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  attorney
  paralegal
  viewer
}

enum DocumentStatus {
  draft
  in_review
  finalized
  archived
}

enum TenantPlan {
  free
  professional
  enterprise
}

enum DataResidency {
  us
  eu
  asia
}

enum AIProvider {
  claude
  openai
  glm
}

enum MessageRole {
  user
  assistant
  system
}

enum KnowledgeSourceType {
  free_public
  commercial
  tenant_custom
}

enum AuditEventSeverity {
  info
  warning
  error
  critical
}

enum SharePermission {
  view
  comment
  edit
}

// Models

model Tenant {
  id                      String            @id @default(uuid())
  name                    String
  slug                    String            @unique
  plan                    TenantPlan        @default(free)
  billing_email           String?
  storage_quota_gb        Int               @default(1)
  storage_used_bytes      BigInt            @default(0)
  ai_query_quota_monthly  Int               @default(1000)
  ai_queries_used_month   Int               @default(0)
  data_residency          DataResidency?
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt
  deleted_at              DateTime?

  users                   User[]
  documents               Document[]
  templates               Template[]
  audit_logs              AuditLog[]
  settings                TenantSettings?
  knowledge_sources       KnowledgeSource[]

  @@index([plan, created_at])
}

model User {
  id              String    @id @default(uuid())
  tenant_id       String
  email           String    @unique
  full_name       String?
  role            UserRole
  avatar_url      String?
  preferences     Json?
  last_login_at   DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  tenant                      Tenant            @relation(fields: [tenant_id], references: [id])
  created_documents           Document[]        @relation("DocumentCreator")
  edited_documents            Document[]        @relation("DocumentEditor")
  versions                    Version[]
  ai_conversations            AIConversation[]
  created_templates           Template[]
  audit_logs                  AuditLog[]
  consents                    UserConsent[]
  shares_created              DocumentShare[]   @relation("ShareCreator")
  shares_received             DocumentShare[]   @relation("ShareRecipient")

  @@index([tenant_id, role])
  @@index([tenant_id, email])
}

model Document {
  id                      String          @id @default(uuid())
  tenant_id               String
  created_by_user_id      String
  template_id             String?
  title                   String
  content                 Json
  content_text            String?
  jurisdiction            String?
  practice_area           String?
  status                  DocumentStatus  @default(draft)
  version_number          Int             @default(1)
  last_edited_by_user_id  String?
  last_edited_at          DateTime?
  size_bytes              Int?
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt
  deleted_at              DateTime?

  tenant                  Tenant            @relation(fields: [tenant_id], references: [id])
  created_by              User              @relation("DocumentCreator", fields: [created_by_user_id], references: [id])
  last_edited_by          User?             @relation("DocumentEditor", fields: [last_edited_by_user_id], references: [id])
  template                Template?         @relation(fields: [template_id], references: [id])
  versions                Version[]
  ai_conversations        AIConversation[]
  shares                  DocumentShare[]

  @@index([tenant_id, created_by_user_id])
  @@index([tenant_id, status, updated_at])
  @@index([jurisdiction, practice_area])
}

model Version {
  id                      String      @id @default(uuid())
  document_id             String
  version_number          Int
  content_snapshot        Json
  content_hash            String
  signature               String
  created_by_user_id      String
  change_description      String?
  ai_suggestions_count    Int         @default(0)
  created_at              DateTime    @default(now())

  document                Document      @relation(fields: [document_id], references: [id])
  created_by              User          @relation(fields: [created_by_user_id], references: [id])
  diffs_from              VersionDiff[] @relation("DiffFrom")
  diffs_to                VersionDiff[] @relation("DiffTo")

  @@unique([document_id, version_number])
  @@index([document_id, created_at(sort: Desc)])
}

model VersionDiff {
  id                  String    @id @default(uuid())
  from_version_id     String
  to_version_id       String
  diff_operations     Json
  added_text_length   Int?
  removed_text_length Int?
  created_at          DateTime  @default(now())

  from_version        Version   @relation("DiffFrom", fields: [from_version_id], references: [id])
  to_version          Version   @relation("DiffTo", fields: [to_version_id], references: [id])

  @@unique([from_version_id, to_version_id])
}

model AIConversation {
  id                  String        @id @default(uuid())
  document_id         String
  user_id             String
  provider            AIProvider
  model               String?
  total_messages      Int           @default(0)
  total_tokens_used   Int           @default(0)
  estimated_cost_usd  Decimal       @default(0.00) @db.Decimal(10, 6)
  created_at          DateTime      @default(now())
  last_message_at     DateTime?

  document            Document      @relation(fields: [document_id], references: [id])
  user                User          @relation(fields: [user_id], references: [id])
  messages            AIMessage[]

  @@index([document_id, created_at(sort: Desc)])
  @@index([user_id, created_at(sort: Desc)])
}

model AIMessage {
  id                  String              @id @default(uuid())
  conversation_id     String
  role                MessageRole
  content             String
  confidence_score    Decimal?            @db.Decimal(3, 2)
  has_citations       Boolean             @default(false)
  tokens_used         Int?
  created_at          DateTime            @default(now())

  conversation        AIConversation      @relation(fields: [conversation_id], references: [id])
  citations           AIMessageCitation[]

  @@index([conversation_id, created_at])
}

model KnowledgeSource {
  id                          String                @id @default(uuid())
  name                        String
  type                        KnowledgeSourceType
  jurisdiction                String?
  mcp_server_url              String?
  api_credentials_encrypted   String?
  is_active                   Boolean               @default(true)
  tenant_id                   String?
  created_at                  DateTime              @default(now())

  tenant                      Tenant?               @relation(fields: [tenant_id], references: [id])
  citations                   AIMessageCitation[]

  @@index([type, jurisdiction, is_active])
}

model AIMessageCitation {
  id                    String          @id @default(uuid())
  ai_message_id         String
  knowledge_source_id   String
  citation_text         String
  excerpt               String?
  url                   String?
  confidence            Decimal?        @db.Decimal(3, 2)
  created_at            DateTime        @default(now())

  ai_message            AIMessage       @relation(fields: [ai_message_id], references: [id])
  knowledge_source      KnowledgeSource @relation(fields: [knowledge_source_id], references: [id])

  @@index([ai_message_id])
  @@index([knowledge_source_id])
}

model Template {
  id                      String      @id @default(uuid())
  tenant_id               String?
  name                    String
  description             String?
  jurisdiction            String
  practice_area           String
  content_template        Json
  parameters              Json?
  version                 Int         @default(1)
  is_active               Boolean     @default(true)
  reviewed_by_attorney    Boolean     @default(false)
  reviewed_at             DateTime?
  created_by_user_id      String
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt

  tenant                  Tenant?     @relation(fields: [tenant_id], references: [id])
  created_by              User        @relation(fields: [created_by_user_id], references: [id])
  documents               Document[]

  @@index([jurisdiction, practice_area, is_active])
  @@index([tenant_id, is_active])
}

model AuditLog {
  id              String              @id @default(uuid())
  tenant_id       String
  user_id         String?
  event_type      String
  event_action    String
  resource_type   String?
  resource_id     String?
  ip_address      String?
  user_agent      String?
  metadata        Json?
  severity        AuditEventSeverity
  created_at      DateTime            @default(now())

  tenant          Tenant              @relation(fields: [tenant_id], references: [id])
  user            User?               @relation(fields: [user_id], references: [id])

  @@index([tenant_id, created_at(sort: Desc)])
  @@index([user_id, created_at(sort: Desc)])
  @@index([event_type, severity, created_at(sort: Desc)])
  @@index([resource_type, resource_id])
}

model TenantSettings {
  tenant_id                   String    @id
  branding_logo_url           String?
  branding_primary_color      String?
  default_ai_provider         AIProvider @default(claude)
  mfa_required                Boolean   @default(false)
  allowed_domains             String[]
  retention_policy_years      Int       @default(7)
  notification_preferences    Json?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt

  tenant                      Tenant    @relation(fields: [tenant_id], references: [id])
}

model UserConsent {
  id              String    @id @default(uuid())
  user_id         String
  consent_type    String
  granted         Boolean
  granted_at      DateTime?
  revoked_at      DateTime?
  ip_address      String?
  created_at      DateTime  @default(now())

  user            User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, consent_type, revoked_at])
  @@index([user_id, consent_type])
}

model DocumentShare {
  id                      String          @id @default(uuid())
  document_id             String
  shared_with_user_id     String?
  shared_with_email       String?
  permission              SharePermission
  shared_by_user_id       String
  expires_at              DateTime?
  access_count            Int             @default(0)
  last_accessed_at        DateTime?
  created_at              DateTime        @default(now())
  revoked_at              DateTime?

  document                Document        @relation(fields: [document_id], references: [id])
  shared_with_user        User?           @relation("ShareRecipient", fields: [shared_with_user_id], references: [id])
  shared_by               User            @relation("ShareCreator", fields: [shared_by_user_id], references: [id])

  @@index([document_id, revoked_at])
  @@index([shared_with_user_id, revoked_at])
  @@index([shared_with_email])
}
