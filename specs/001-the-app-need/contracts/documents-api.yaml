openapi: 3.0.3
info:
  title: mind.law Documents API
  version: 1.0.0
  description: API for legal document management with multi-tenant isolation

servers:
  - url: https://mindlaw.app/api
    description: Production
  - url: http://localhost:3000/api
    description: Development

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Document:
      type: object
      required:
        - id
        - tenant_id
        - title
        - content
        - status
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        created_by_user_id:
          type: string
          format: uuid
        template_id:
          type: string
          format: uuid
          nullable: true
        title:
          type: string
          minLength: 1
          maxLength: 500
        content:
          type: object
          description: Tiptap JSON content
        content_text:
          type: string
          description: Plain text for search
        jurisdiction:
          type: string
          example: "US-CA"
        practice_area:
          type: string
          example: "contract"
        status:
          type: string
          enum: [draft, in_review, finalized, archived]
        version_number:
          type: integer
          minimum: 1
        last_edited_by_user_id:
          type: string
          format: uuid
        last_edited_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateDocumentRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        template_id:
          type: string
          format: uuid
        jurisdiction:
          type: string
        practice_area:
          type: string
        content:
          type: object
          description: Initial Tiptap content (empty if omitted)

    UpdateDocumentRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        content:
          type: object
        jurisdiction:
          type: string
        practice_area:
          type: string
        status:
          type: string
          enum: [draft, in_review, finalized, archived]

    Version:
      type: object
      properties:
        id:
          type: string
          format: uuid
        document_id:
          type: string
          format: uuid
        version_number:
          type: integer
        content_snapshot:
          type: object
        content_hash:
          type: string
        signature:
          type: string
        created_by_user_id:
          type: string
          format: uuid
        change_description:
          type: string
        ai_suggestions_count:
          type: integer
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

security:
  - bearerAuth: []

paths:
  /documents:
    get:
      summary: List documents
      description: Get paginated list of documents for authenticated user's tenant
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, in_review, finalized, archived]
        - name: search
          in: query
          schema:
            type: string
          description: Full-text search query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create document
      description: Create a new document from scratch or template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (viewer role cannot create)

  /documents/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get document
      description: Retrieve a specific document by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found
        '403':
          description: Access denied (wrong tenant)

    patch:
      summary: Update document
      description: Update document properties and content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid request
        '403':
          description: Forbidden (viewer role cannot edit)
        '404':
          description: Document not found

    delete:
      summary: Delete document
      description: Soft delete a document
      responses:
        '204':
          description: Document deleted
        '403':
          description: Forbidden
        '404':
          description: Document not found

  /documents/{documentId}/versions:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get version history
      description: List all versions of a document
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Version'
                  pagination:
                    type: object

  /documents/{documentId}/versions/{versionNumber}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: versionNumber
        in: path
        required: true
        schema:
          type: integer
          minimum: 1

    get:
      summary: Get specific version
      description: Retrieve a specific version of a document
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '404':
          description: Version not found

  /documents/{documentId}/rollback:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      summary: Rollback to version
      description: Rollback document to a previous version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - version_number
                - reason
              properties:
                version_number:
                  type: integer
                  minimum: 1
                reason:
                  type: string
                  minLength: 1
                  maxLength: 500
      responses:
        '200':
          description: Rollback successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid version or reason
        '403':
          description: Forbidden (insufficient permissions)
        '404':
          description: Document or version not found

  /documents/{documentId}/export:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      summary: Export document
      description: Export document with audit trail in various formats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - format
              properties:
                format:
                  type: string
                  enum: [docx, pdf, pdf-a]
                include_audit_trail:
                  type: boolean
                  default: true
                include_ai_conversations:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Export successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url:
                    type: string
                    format: uri
                  expires_at:
                    type: string
                    format: date-time
                  file_size_bytes:
                    type: integer
        '400':
          description: Invalid export format
        '500':
          description: Export failed
